{"ast":null,"code":"import _objectSpread from\"D:/ProgramDevelop/switchboard-plus-v2/web-ui-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import io from'socket.io-client';import axios from'axios';import'./App.css';// 컴포넌트들\nimport Header from'./components/Header';import StatsBar from'./components/StatsBar';import PresetSection from'./components/PresetSection';import GroupSection from'./components/GroupSection';import ClientMonitor from'./components/ClientMonitor';import ClientDetailModal from'./components/ClientDetailModal';import AddClientModal from'./components/AddClientModal';import PresetModal from'./components/PresetModal';import GroupModal from'./components/GroupModal';import Toast from'./components/Toast';// API 기본 URL\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_BASE_URL='http://localhost:8000/api';function App(){// 상태 관리\nconst[isDarkMode,setIsDarkMode]=useState(false);const[isSocketConnected,setIsSocketConnected]=useState(false);const[currentTime,setCurrentTime]=useState(new Date());// 데이터 상태\nconst[clients,setClients]=useState([]);const[groups,setGroups]=useState([]);const[presets,setPresets]=useState([]);const[clientHistory,setClientHistory]=useState({});// 선택 상태\nconst[selectedClients,setSelectedClients]=useState(new Set());const[selectedGroups,setSelectedGroups]=useState(new Set());const[selectedPresets,setSelectedPresets]=useState(new Set());// 모달 상태\nconst[showClientModal,setShowClientModal]=useState(false);const[showAddClientModal,setShowAddClientModal]=useState(false);const[showPresetModal,setShowPresetModal]=useState(false);const[showGroupModal,setShowGroupModal]=useState(false);const[currentClientId,setCurrentClientId]=useState(null);const[editingPreset,setEditingPreset]=useState(null);const[editingGroup,setEditingGroup]=useState(null);const[editingClient,setEditingClient]=useState(null);// 토스트 상태\nconst[toast,setToast]=useState({show:false,message:'',type:'info'});// 초기화\nuseEffect(()=>{// 전역 에러 핸들러 추가\nconst handleGlobalError=event=>{if(event.message&&event.message.includes('message channel closed')){// 메시지 채널 에러는 무시\nevent.preventDefault();return;}console.error('Global error:',event);};const handleUnhandledRejection=event=>{if(event.reason&&event.reason.message&&event.reason.message.includes('message channel closed')){// 메시지 채널 에러는 무시\nevent.preventDefault();return;}console.error('Unhandled promise rejection:',event.reason);};window.addEventListener('error',handleGlobalError);window.addEventListener('unhandledrejection',handleUnhandledRejection);initializeTheme();initializeSocket();startAutoRefresh();updateTime();fetchInitialData();const timeInterval=setInterval(updateTime,1000);return()=>{clearInterval(timeInterval);window.removeEventListener('error',handleGlobalError);window.removeEventListener('unhandledrejection',handleUnhandledRejection);};},[]);// API 데이터 가져오기\nconst fetchInitialData=async()=>{try{await Promise.all([fetchClients(),fetchGroups(),fetchPresets()]);}catch(error){console.error('초기 데이터 로드 실패:',error);// API 실패 시 데모 데이터 생성\ncreateDemoData();}};// API 함수들\nconst fetchClients=async()=>{try{const response=await axios.get(\"\".concat(API_BASE_URL,\"/clients\"));setClients(response.data);}catch(error){console.error('클라이언트 조회 실패:',error);// 네트워크 에러가 아닌 경우에만 throw\nif(!error.message||!error.message.includes('Network Error')){throw error;}}};const fetchGroups=async()=>{try{const response=await axios.get(\"\".concat(API_BASE_URL,\"/groups\"));setGroups(response.data);}catch(error){console.error('그룹 조회 실패:',error);if(!error.message||!error.message.includes('Network Error')){throw error;}}};const fetchPresets=async()=>{try{const response=await axios.get(\"\".concat(API_BASE_URL,\"/presets\"));setPresets(response.data);}catch(error){console.error('프리셋 조회 실패:',error);if(!error.message||!error.message.includes('Network Error')){throw error;}}};// 테마 초기화\nconst initializeTheme=()=>{const savedTheme=localStorage.getItem('theme');if(savedTheme==='dark'){setIsDarkMode(true);document.body.setAttribute('data-theme','dark');}};// Socket 초기화 (시뮬레이션)\nconst initializeSocket=()=>{setTimeout(()=>{setIsSocketConnected(Math.random()>0.1);if(isSocketConnected){simulateRealTimeUpdates();}},1500);};// 자동 새로고침\nconst startAutoRefresh=()=>{setInterval(()=>{if(isSocketConnected){refreshClientsData();}},30000);};// 시간 업데이트\nconst updateTime=()=>{setCurrentTime(new Date());};// 실시간 업데이트 시뮬레이션\nconst simulateRealTimeUpdates=()=>{setInterval(()=>{if(isSocketConnected&&clients.length>0){simulateRandomClientUpdate();}},15000);};const simulateRandomClientUpdate=()=>{if(clients.length===0)return;const randomClient=clients[Math.floor(Math.random()*clients.length)];const currentStatus=randomClient.status;let newStatus=currentStatus;if(currentStatus==='offline'&&Math.random()<0.3){newStatus='online';}else if(currentStatus==='online'&&Math.random()<0.2){newStatus=Math.random()<0.5?'running':'offline';}else if(currentStatus==='running'&&Math.random()<0.1){newStatus='online';}if(newStatus!==currentStatus){updateClientStatus(randomClient.id,newStatus);addClientHistory(randomClient.id,\"\\uC0C1\\uD0DC \\uBCC0\\uACBD: \".concat(currentStatus,\" \\u2192 \").concat(newStatus));}};const refreshClientsData=()=>{console.log('클라이언트 데이터 자동 새로고침...');};// 클라이언트 상태 업데이트\nconst updateClientStatus=(clientId,status)=>{setClients(prev=>prev.map(client=>client.id===clientId?_objectSpread(_objectSpread({},client),{},{status,last_seen:new Date()}):client));};// 클라이언트 히스토리 추가\nconst addClientHistory=(clientId,event)=>{setClientHistory(prev=>{const history=prev[clientId]||[];const newHistory=[{event,timestamp:new Date()},...history.slice(0,9)// 최대 10개만 유지\n];return _objectSpread(_objectSpread({},prev),{},{[clientId]:newHistory});});};// 테마 토글\nconst toggleDarkMode=()=>{const newDarkMode=!isDarkMode;setIsDarkMode(newDarkMode);if(newDarkMode){document.body.setAttribute('data-theme','dark');localStorage.setItem('theme','dark');}else{document.body.removeAttribute('data-theme');localStorage.setItem('theme','light');}showToast(newDarkMode?'다크 모드가 활성화되었습니다.':'라이트 모드가 활성화되었습니다.','success');};// 토스트 표시\nconst showToast=function(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'info';setToast({show:true,message,type});setTimeout(()=>setToast({show:false,message:'',type:'info'}),4000);};// 클라이언트 관리\nconst handleAddClient=async clientData=>{try{const response=await axios.post(\"\".concat(API_BASE_URL,\"/clients\"),clientData);await fetchClients();showToast(\"\\uD074\\uB77C\\uC774\\uC5B8\\uD2B8 \\\"\".concat(clientData.name,\"\\\"\\uC774(\\uAC00) \\uCD94\\uAC00\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'success');}catch(error){var _error$response,_error$response$data;console.error('클라이언트 추가 실패:',error);showToast('클라이언트 추가 실패: '+(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||error.message),'error');}};const handleDeleteClient=async clientId=>{if(!window.confirm('정말로 이 클라이언트를 삭제하시겠습니까?'))return;try{await axios.delete(\"\".concat(API_BASE_URL,\"/clients/\").concat(clientId));await fetchClients();showToast('클라이언트가 삭제되었습니다.','error');}catch(error){var _error$response2,_error$response2$data;console.error('클라이언트 삭제 실패:',error);showToast('클라이언트 삭제 실패: '+(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||error.message),'error');}};const handleClientAction=async action=>{if(!currentClientId)return;try{const client=clients.find(c=>c.id===currentClientId);if(!client)return;switch(action){case'heartbeat':showToast(\"\\\"\".concat(client.name,\"\\\"\\uC5D0 \\uC0C1\\uD0DC \\uD655\\uC778 \\uC694\\uCCAD\\uC744 \\uC804\\uC1A1\\uD588\\uC2B5\\uB2C8\\uB2E4.\"),'info');addClientHistory(currentClientId,'상태 확인 요청');break;case'stop_all':showToast(\"\\\"\".concat(client.name,\"\\\"\\uC758 \\uBAA8\\uB4E0 \\uD504\\uB85C\\uC138\\uC2A4 \\uC911\\uC9C0 \\uBA85\\uB839\\uC744 \\uC804\\uC1A1\\uD588\\uC2B5\\uB2C8\\uB2E4.\"),'success');addClientHistory(currentClientId,'모든 프로세스 중지됨');break;case'delete':await handleDeleteClient(currentClientId);setShowClientModal(false);break;}}catch(error){var _error$response3,_error$response3$data;console.error('클라이언트 액션 실패:',error);showToast('클라이언트 액션 실패: '+(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||error.message),'error');}};// 그룹 관리\nconst handleAddGroup=async groupData=>{try{await axios.post(\"\".concat(API_BASE_URL,\"/groups\"),groupData);await fetchGroups();showToast(\"\\uADF8\\uB8F9 \\\"\".concat(groupData.name,\"\\\"\\uC774(\\uAC00) \\uC0DD\\uC131\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'success');}catch(error){var _error$response4,_error$response4$data;console.error('그룹 추가 실패:',error);showToast('그룹 추가 실패: '+(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||error.message),'error');}};const handleEditGroup=groupId=>{const group=groups.find(g=>g.id===groupId);if(group){setEditingGroup(group);setShowGroupModal(true);}};const handleSaveGroup=async groupData=>{try{if(editingGroup){await axios.put(\"\".concat(API_BASE_URL,\"/groups/\").concat(editingGroup.id),groupData);}else{await axios.post(\"\".concat(API_BASE_URL,\"/groups\"),groupData);}await fetchGroups();setShowGroupModal(false);setEditingGroup(null);showToast(\"\\uADF8\\uB8F9 \\\"\".concat(groupData.name,\"\\\"\\uC774(\\uAC00) \\uC800\\uC7A5\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'success');}catch(error){var _error$response5,_error$response5$data;console.error('그룹 저장 실패:',error);showToast('그룹 저장 실패: '+(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||error.message),'error');}};const handleDeleteGroup=async groupId=>{const group=groups.find(g=>g.id===groupId);if(!group)return;if(window.confirm(\"\\uC815\\uB9D0 \\\"\".concat(group.name,\"\\\" \\uADF8\\uB8F9\\uC744 \\uC0AD\\uC81C\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\"))){try{await axios.delete(\"\".concat(API_BASE_URL,\"/groups/\").concat(groupId));await fetchGroups();showToast(\"\\uADF8\\uB8F9 \\\"\".concat(group.name,\"\\\"\\uC774(\\uAC00) \\uC0AD\\uC81C\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'error');}catch(error){var _error$response6,_error$response6$data;console.error('그룹 삭제 실패:',error);showToast('그룹 삭제 실패: '+(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.error)||error.message),'error');}}};// 프리셋 관리\nconst handleAddPreset=presetData=>{setEditingPreset(null);setShowPresetModal(true);};const handleEditPreset=presetId=>{const preset=presets.find(p=>p.id===presetId);if(preset){setEditingPreset(preset);setShowPresetModal(true);}};const handleSavePreset=async presetData=>{try{// 새로운 구조에 맞게 데이터 변환\nconst presetPayload={name:presetData.name,description:presetData.description,group_id:presetData.group_id,client_commands:presetData.client_commands};if(editingPreset){await axios.put(\"\".concat(API_BASE_URL,\"/presets/\").concat(editingPreset.id),presetPayload);}else{await axios.post(\"\".concat(API_BASE_URL,\"/presets\"),presetPayload);}await fetchPresets();setShowPresetModal(false);setEditingPreset(null);showToast(\"\\uD504\\uB9AC\\uC14B \\\"\".concat(presetData.name,\"\\\"\\uC774(\\uAC00) \\uC800\\uC7A5\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'success');}catch(error){var _error$response7,_error$response7$data;console.error('프리셋 저장 실패:',error);showToast('프리셋 저장 실패: '+(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.error)||error.message),'error');}};const handleDeletePreset=async presetId=>{const preset=presets.find(p=>p.id===presetId);if(!preset)return;if(window.confirm(\"\\uC815\\uB9D0 \\\"\".concat(preset.name,\"\\\" \\uD504\\uB9AC\\uC14B\\uC744 \\uC0AD\\uC81C\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\\n\\uC2E4\\uD589 \\uC911\\uC778 \\uACBD\\uC6B0 \\uC790\\uB3D9\\uC73C\\uB85C \\uC911\\uC9C0\\uB429\\uB2C8\\uB2E4.\"))){try{await axios.delete(\"\".concat(API_BASE_URL,\"/presets/\").concat(presetId));await fetchPresets();showToast(\"\\uD504\\uB9AC\\uC14B \\\"\".concat(preset.name,\"\\\"\\uC774(\\uAC00) \\uC0AD\\uC81C\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'error');}catch(error){var _error$response8,_error$response8$data;console.error('프리셋 삭제 실패:',error);showToast('프리셋 삭제 실패: '+(((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.error)||error.message),'error');}}};// 프리셋 실행\nconst handleExecutePreset=async presetId=>{try{var _response$data$target;const response=await axios.post(\"\".concat(API_BASE_URL,\"/presets/\").concat(presetId,\"/execute\"));// 프리셋을 활성 상태로 변경\nsetPresets(prev=>prev.map(p=>p.id===presetId?_objectSpread(_objectSpread({},p),{},{is_active:true}):p));showToast(\"\\uD504\\uB9AC\\uC14B\\uC774 \".concat(((_response$data$target=response.data.target_clients)===null||_response$data$target===void 0?void 0:_response$data$target.length)||0,\"\\uAC1C \\uD074\\uB77C\\uC774\\uC5B8\\uD2B8\\uC5D0\\uC11C \\uC2E4\\uD589\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'success');}catch(error){var _error$response9,_error$response9$data;console.error('프리셋 실행 실패:',error);showToast('프리셋 실행 실패: '+(((_error$response9=error.response)===null||_error$response9===void 0?void 0:(_error$response9$data=_error$response9.data)===null||_error$response9$data===void 0?void 0:_error$response9$data.error)||error.message),'error');}};// 일괄 제어\nconst handleSelectAllPresets=checked=>{if(checked){setSelectedPresets(new Set(presets.map(p=>p.id)));}else{setSelectedPresets(new Set());}};const handleSelectAllGroups=checked=>{if(checked){setSelectedGroups(new Set(groups.map(g=>g.id)));}else{setSelectedGroups(new Set());}};const handleBulkPresetAction=action=>{if(selectedPresets.size===0){showToast('선택된 프리셋이 없습니다.','error');return;}const actionNames={execute:'실행',stop:'정지',delete:'삭제'};const actionName=actionNames[action];const presetCount=selectedPresets.size;if(action==='delete'){if(window.confirm(\"\\uC120\\uD0DD\\uB41C \".concat(presetCount,\"\\uAC1C \\uD504\\uB9AC\\uC14B\\uC744 \\uBAA8\\uB450 \\uC0AD\\uC81C\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\"))){selectedPresets.forEach(presetId=>handleDeletePreset(presetId));setSelectedPresets(new Set());}}else if(action==='execute'){if(window.confirm(\"\\uC120\\uD0DD\\uB41C \".concat(presetCount,\"\\uAC1C \\uD504\\uB9AC\\uC14B\\uC744 \\uBAA8\\uB450 \\uC2E4\\uD589\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\"))){let executed=0;selectedPresets.forEach(presetId=>{const preset=presets.find(p=>p.id===presetId);if(preset&&!preset.is_active){handleExecutePreset(presetId);executed++;}});showToast(\"\".concat(executed,\"\\uAC1C \\uD504\\uB9AC\\uC14B\\uC774 \\uC2E4\\uD589\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'success');}}};const handleBulkGroupAction=action=>{if(selectedGroups.size===0){showToast('선택된 그룹이 없습니다.','error');return;}const actionNames={on:'켜기',reboot:'재부팅',off:'끄기'};const actionName=actionNames[action];const groupCount=selectedGroups.size;if(window.confirm(\"\\uC120\\uD0DD\\uB41C \".concat(groupCount,\"\\uAC1C \\uADF8\\uB8F9\\uC758 \\uBAA8\\uB4E0 \\uB514\\uC2A4\\uD50C\\uB808\\uC774 \\uC11C\\uBC84\\uB97C \").concat(actionName,\" \\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\"))){let totalClients=0;selectedGroups.forEach(groupId=>{const group=groups.find(g=>g.id===groupId);if(group){totalClients+=group.client_ids.length;group.client_ids.forEach(clientId=>{addClientHistory(clientId,\"\\uC804\\uC6D0 \".concat(actionName,\" \\uBA85\\uB839 \\uC218\\uC2E0\"));});}});showToast(\"\".concat(groupCount,\"\\uAC1C \\uADF8\\uB8F9 (\").concat(totalClients,\"\\uB300 \\uD074\\uB77C\\uC774\\uC5B8\\uD2B8)\\uC5D0 \\uC804\\uC6D0 \").concat(actionName,\" \\uBA85\\uB839\\uC744 \\uC804\\uC1A1\\uD588\\uC2B5\\uB2C8\\uB2E4. (v2.1\\uC5D0\\uC11C \\uD65C\\uC131\\uD654)\"),'info');}};// 데모 데이터 생성\nconst createDemoData=()=>{setTimeout(()=>{// 데모 클라이언트\nconst demoClients=[{name:'Display_01',ip_address:'192.168.1.101',status:'online'},{name:'Display_02',ip_address:'192.168.1.102',status:'running'},{name:'Display_03',ip_address:'192.168.1.103',status:'offline'},{name:'Display_04',ip_address:'192.168.1.104',status:'online'}];const newClients=demoClients.map((clientData,index)=>({id:\"demo_client_\".concat(index+1),name:clientData.name,ip_address:clientData.ip_address,port:8081,description:\"\\uB370\\uBAA8 \\uD074\\uB77C\\uC774\\uC5B8\\uD2B8 \".concat(index+1),status:clientData.status,created_at:new Date(Date.now()-index*86400000),last_seen:clientData.status!=='offline'?new Date():null}));setClients(newClients);newClients.forEach(client=>addClientHistory(client.id,'데모 데이터로 생성됨'));// 데모 그룹\nsetTimeout(()=>{const demoGroup={id:'demo_group_1',name:'메인 디스플레이 월',description:'중앙 메인 디스플레이 구역',client_ids:['demo_client_1','demo_client_2','demo_client_4'],created_at:new Date()};setGroups([demoGroup]);},500);// 데모 프리셋\nsetTimeout(()=>{const demoPreset={id:'demo_preset_1',name:'메인 콘텐츠 재생',description:'4K 메인 콘텐츠 스트리밍',group_id:'demo_group_1',client_commands:{'demo_client_1':'D:\\\\UnrealProjects\\\\MainContent\\\\Windows\\\\MainContent.exe -dc_node=Node_0 -fullscreen','demo_client_2':'D:\\\\UnrealProjects\\\\MainContent\\\\Windows\\\\MainContent.exe -dc_node=Node_1 -fullscreen','demo_client_4':'D:\\\\UnrealProjects\\\\MainContent\\\\Windows\\\\MainContent.exe -dc_node=Node_2 -fullscreen'},created_at:new Date(),is_active:false};setPresets([demoPreset]);},1000);showToast('데모 데이터가 로드되었습니다. 실제 환경에서는 서버와 연동됩니다.','info');},3000);};// 통계 계산\nconst stats={totalClients:clients.length,onlineClients:clients.filter(c=>c.status==='online'||c.status==='running').length,runningClients:clients.filter(c=>c.status==='running').length,totalGroups:groups.length};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Header,{isDarkMode:isDarkMode,isSocketConnected:isSocketConnected,currentTime:currentTime,connectedCount:stats.onlineClients,onToggleDarkMode:toggleDarkMode}),/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(StatsBar,{stats:stats}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-layout\",children:[/*#__PURE__*/_jsx(PresetSection,{presets:presets,groups:groups,selectedPresets:selectedPresets,onSelectAll:handleSelectAllPresets,onBulkAction:handleBulkPresetAction,onAddPreset:()=>{console.log('새 프리셋 버튼 클릭됨');console.log('현재 showPresetModal 상태:',showPresetModal);setEditingPreset(null);setShowPresetModal(true);console.log('showPresetModal을 true로 설정함');},onEditPreset:handleEditPreset,onDeletePreset:handleDeletePreset,onExecutePreset:handleExecutePreset,onSelectPreset:(presetId,selected)=>{setSelectedPresets(prev=>{const newSet=new Set(prev);if(selected){newSet.add(presetId);}else{newSet.delete(presetId);}return newSet;});}}),/*#__PURE__*/_jsx(GroupSection,{groups:groups,clients:clients,selectedGroups:selectedGroups,onSelectAll:handleSelectAllGroups,onBulkAction:handleBulkGroupAction,onAddGroup:()=>{console.log('새 그룹 버튼 클릭됨');setEditingGroup(null);setShowGroupModal(true);},onEditGroup:handleEditGroup,onDeleteGroup:handleDeleteGroup,onSelectGroup:(groupId,selected)=>{setSelectedGroups(prev=>{const newSet=new Set(prev);if(selected){newSet.add(groupId);}else{newSet.delete(groupId);}return newSet;});}})]}),/*#__PURE__*/_jsx(ClientMonitor,{clients:clients,onAddClient:()=>{console.log('새 클라이언트 버튼 클릭됨');setEditingClient(null);setShowClientModal(true);},onClientClick:clientId=>{setCurrentClientId(clientId);setShowClientModal(true);}})]}),showClientModal&&/*#__PURE__*/_jsx(ClientDetailModal,{client:clients.find(c=>c.id===currentClientId),history:clientHistory[currentClientId]||[],onClose:()=>setShowClientModal(false),onAction:handleClientAction,onDelete:()=>{setCurrentClientId(null);setShowClientModal(false);}}),showAddClientModal&&/*#__PURE__*/_jsx(AddClientModal,{onClose:()=>setShowAddClientModal(false),onAddClient:handleAddClient}),showPresetModal&&/*#__PURE__*/_jsx(PresetModal,{onClose:()=>{console.log('PresetModal 닫기 호출됨');setShowPresetModal(false);setEditingPreset(null);},onSave:handleSavePreset,editingPreset:editingPreset,groups:groups,clients:clients}),showGroupModal&&/*#__PURE__*/_jsx(GroupModal,{onClose:()=>{setShowGroupModal(false);setEditingGroup(null);},onSave:handleSaveGroup,editingGroup:editingGroup,clients:clients}),/*#__PURE__*/_jsx(Toast,{show:toast.show,message:toast.message,type:toast.type})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","io","axios","Header","StatsBar","PresetSection","GroupSection","ClientMonitor","ClientDetailModal","AddClientModal","PresetModal","GroupModal","Toast","jsx","_jsx","jsxs","_jsxs","API_BASE_URL","App","isDarkMode","setIsDarkMode","isSocketConnected","setIsSocketConnected","currentTime","setCurrentTime","Date","clients","setClients","groups","setGroups","presets","setPresets","clientHistory","setClientHistory","selectedClients","setSelectedClients","Set","selectedGroups","setSelectedGroups","selectedPresets","setSelectedPresets","showClientModal","setShowClientModal","showAddClientModal","setShowAddClientModal","showPresetModal","setShowPresetModal","showGroupModal","setShowGroupModal","currentClientId","setCurrentClientId","editingPreset","setEditingPreset","editingGroup","setEditingGroup","editingClient","setEditingClient","toast","setToast","show","message","type","handleGlobalError","event","includes","preventDefault","console","error","handleUnhandledRejection","reason","window","addEventListener","initializeTheme","initializeSocket","startAutoRefresh","updateTime","fetchInitialData","timeInterval","setInterval","clearInterval","removeEventListener","Promise","all","fetchClients","fetchGroups","fetchPresets","createDemoData","response","get","concat","data","savedTheme","localStorage","getItem","document","body","setAttribute","setTimeout","Math","random","simulateRealTimeUpdates","refreshClientsData","length","simulateRandomClientUpdate","randomClient","floor","currentStatus","status","newStatus","updateClientStatus","id","addClientHistory","log","clientId","prev","map","client","_objectSpread","last_seen","history","newHistory","timestamp","slice","toggleDarkMode","newDarkMode","setItem","removeAttribute","showToast","arguments","undefined","handleAddClient","clientData","post","name","_error$response","_error$response$data","handleDeleteClient","confirm","delete","_error$response2","_error$response2$data","handleClientAction","action","find","c","_error$response3","_error$response3$data","handleAddGroup","groupData","_error$response4","_error$response4$data","handleEditGroup","groupId","group","g","handleSaveGroup","put","_error$response5","_error$response5$data","handleDeleteGroup","_error$response6","_error$response6$data","handleAddPreset","presetData","handleEditPreset","presetId","preset","p","handleSavePreset","presetPayload","description","group_id","client_commands","_error$response7","_error$response7$data","handleDeletePreset","_error$response8","_error$response8$data","handleExecutePreset","_response$data$target","is_active","target_clients","_error$response9","_error$response9$data","handleSelectAllPresets","checked","handleSelectAllGroups","handleBulkPresetAction","size","actionNames","execute","stop","actionName","presetCount","forEach","executed","handleBulkGroupAction","on","reboot","off","groupCount","totalClients","client_ids","demoClients","ip_address","newClients","index","port","created_at","now","demoGroup","demoPreset","stats","onlineClients","filter","runningClients","totalGroups","className","children","connectedCount","onToggleDarkMode","onSelectAll","onBulkAction","onAddPreset","onEditPreset","onDeletePreset","onExecutePreset","onSelectPreset","selected","newSet","add","onAddGroup","onEditGroup","onDeleteGroup","onSelectGroup","onAddClient","onClientClick","onClose","onAction","onDelete","onSave"],"sources":["D:/ProgramDevelop/switchboard-plus-v2/web-ui-react/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\n// 컴포넌트들\r\nimport Header from './components/Header';\r\nimport StatsBar from './components/StatsBar';\r\nimport PresetSection from './components/PresetSection';\r\nimport GroupSection from './components/GroupSection';\r\nimport ClientMonitor from './components/ClientMonitor';\r\nimport ClientDetailModal from './components/ClientDetailModal';\r\nimport AddClientModal from './components/AddClientModal';\r\nimport PresetModal from './components/PresetModal';\r\nimport GroupModal from './components/GroupModal';\r\nimport Toast from './components/Toast';\r\n\r\n// API 기본 URL\r\nconst API_BASE_URL = 'http://localhost:8000/api';\r\n\r\nfunction App() {\r\n  // 상태 관리\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isSocketConnected, setIsSocketConnected] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  \r\n  // 데이터 상태\r\n  const [clients, setClients] = useState([]);\r\n  const [groups, setGroups] = useState([]);\r\n  const [presets, setPresets] = useState([]);\r\n  const [clientHistory, setClientHistory] = useState({});\r\n  \r\n  // 선택 상태\r\n  const [selectedClients, setSelectedClients] = useState(new Set());\r\n  const [selectedGroups, setSelectedGroups] = useState(new Set());\r\n  const [selectedPresets, setSelectedPresets] = useState(new Set());\r\n  \r\n  // 모달 상태\r\n  const [showClientModal, setShowClientModal] = useState(false);\r\n  const [showAddClientModal, setShowAddClientModal] = useState(false);\r\n  const [showPresetModal, setShowPresetModal] = useState(false);\r\n  const [showGroupModal, setShowGroupModal] = useState(false);\r\n  const [currentClientId, setCurrentClientId] = useState(null);\r\n  const [editingPreset, setEditingPreset] = useState(null);\r\n  const [editingGroup, setEditingGroup] = useState(null);\r\n  const [editingClient, setEditingClient] = useState(null);\r\n  \r\n  // 토스트 상태\r\n  const [toast, setToast] = useState({ show: false, message: '', type: 'info' });\r\n\r\n  // 초기화\r\n  useEffect(() => {\r\n    // 전역 에러 핸들러 추가\r\n    const handleGlobalError = (event) => {\r\n      if (event.message && event.message.includes('message channel closed')) {\r\n        // 메시지 채널 에러는 무시\r\n        event.preventDefault();\r\n        return;\r\n      }\r\n      console.error('Global error:', event);\r\n    };\r\n\r\n    const handleUnhandledRejection = (event) => {\r\n      if (event.reason && event.reason.message && event.reason.message.includes('message channel closed')) {\r\n        // 메시지 채널 에러는 무시\r\n        event.preventDefault();\r\n        return;\r\n      }\r\n      console.error('Unhandled promise rejection:', event.reason);\r\n    };\r\n\r\n    window.addEventListener('error', handleGlobalError);\r\n    window.addEventListener('unhandledrejection', handleUnhandledRejection);\r\n\r\n    initializeTheme();\r\n    initializeSocket();\r\n    startAutoRefresh();\r\n    updateTime();\r\n    fetchInitialData();\r\n    \r\n    const timeInterval = setInterval(updateTime, 1000);\r\n    \r\n    return () => {\r\n      clearInterval(timeInterval);\r\n      window.removeEventListener('error', handleGlobalError);\r\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection);\r\n    };\r\n  }, []);\r\n\r\n  // API 데이터 가져오기\r\n  const fetchInitialData = async () => {\r\n    try {\r\n      await Promise.all([\r\n        fetchClients(),\r\n        fetchGroups(),\r\n        fetchPresets()\r\n      ]);\r\n    } catch (error) {\r\n      console.error('초기 데이터 로드 실패:', error);\r\n      // API 실패 시 데모 데이터 생성\r\n      createDemoData();\r\n    }\r\n  };\r\n\r\n  // API 함수들\r\n  const fetchClients = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/clients`);\r\n      setClients(response.data);\r\n    } catch (error) {\r\n      console.error('클라이언트 조회 실패:', error);\r\n      // 네트워크 에러가 아닌 경우에만 throw\r\n      if (!error.message || !error.message.includes('Network Error')) {\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchGroups = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/groups`);\r\n      setGroups(response.data);\r\n    } catch (error) {\r\n      console.error('그룹 조회 실패:', error);\r\n      if (!error.message || !error.message.includes('Network Error')) {\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchPresets = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/presets`);\r\n      setPresets(response.data);\r\n    } catch (error) {\r\n      console.error('프리셋 조회 실패:', error);\r\n      if (!error.message || !error.message.includes('Network Error')) {\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n\r\n  // 테마 초기화\r\n  const initializeTheme = () => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    if (savedTheme === 'dark') {\r\n      setIsDarkMode(true);\r\n      document.body.setAttribute('data-theme', 'dark');\r\n    }\r\n  };\r\n\r\n  // Socket 초기화 (시뮬레이션)\r\n  const initializeSocket = () => {\r\n    setTimeout(() => {\r\n      setIsSocketConnected(Math.random() > 0.1);\r\n      if (isSocketConnected) {\r\n        simulateRealTimeUpdates();\r\n      }\r\n    }, 1500);\r\n  };\r\n\r\n  // 자동 새로고침\r\n  const startAutoRefresh = () => {\r\n    setInterval(() => {\r\n      if (isSocketConnected) {\r\n        refreshClientsData();\r\n      }\r\n    }, 30000);\r\n  };\r\n\r\n  // 시간 업데이트\r\n  const updateTime = () => {\r\n    setCurrentTime(new Date());\r\n  };\r\n\r\n  // 실시간 업데이트 시뮬레이션\r\n  const simulateRealTimeUpdates = () => {\r\n    setInterval(() => {\r\n      if (isSocketConnected && clients.length > 0) {\r\n        simulateRandomClientUpdate();\r\n      }\r\n    }, 15000);\r\n  };\r\n\r\n  const simulateRandomClientUpdate = () => {\r\n    if (clients.length === 0) return;\r\n    \r\n    const randomClient = clients[Math.floor(Math.random() * clients.length)];\r\n    const currentStatus = randomClient.status;\r\n    \r\n    let newStatus = currentStatus;\r\n    if (currentStatus === 'offline' && Math.random() < 0.3) {\r\n      newStatus = 'online';\r\n    } else if (currentStatus === 'online' && Math.random() < 0.2) {\r\n      newStatus = Math.random() < 0.5 ? 'running' : 'offline';\r\n    } else if (currentStatus === 'running' && Math.random() < 0.1) {\r\n      newStatus = 'online';\r\n    }\r\n    \r\n    if (newStatus !== currentStatus) {\r\n      updateClientStatus(randomClient.id, newStatus);\r\n      addClientHistory(randomClient.id, `상태 변경: ${currentStatus} → ${newStatus}`);\r\n    }\r\n  };\r\n\r\n  const refreshClientsData = () => {\r\n    console.log('클라이언트 데이터 자동 새로고침...');\r\n  };\r\n\r\n  // 클라이언트 상태 업데이트\r\n  const updateClientStatus = (clientId, status) => {\r\n    setClients(prev => prev.map(client => \r\n      client.id === clientId \r\n        ? { ...client, status, last_seen: new Date() }\r\n        : client\r\n    ));\r\n  };\r\n\r\n  // 클라이언트 히스토리 추가\r\n  const addClientHistory = (clientId, event) => {\r\n    setClientHistory(prev => {\r\n      const history = prev[clientId] || [];\r\n      const newHistory = [\r\n        { event, timestamp: new Date() },\r\n        ...history.slice(0, 9) // 최대 10개만 유지\r\n      ];\r\n      return { ...prev, [clientId]: newHistory };\r\n    });\r\n  };\r\n\r\n  // 테마 토글\r\n  const toggleDarkMode = () => {\r\n    const newDarkMode = !isDarkMode;\r\n    setIsDarkMode(newDarkMode);\r\n    \r\n    if (newDarkMode) {\r\n      document.body.setAttribute('data-theme', 'dark');\r\n      localStorage.setItem('theme', 'dark');\r\n    } else {\r\n      document.body.removeAttribute('data-theme');\r\n      localStorage.setItem('theme', 'light');\r\n    }\r\n    \r\n    showToast(newDarkMode ? '다크 모드가 활성화되었습니다.' : '라이트 모드가 활성화되었습니다.', 'success');\r\n  };\r\n\r\n  // 토스트 표시\r\n  const showToast = (message, type = 'info') => {\r\n    setToast({ show: true, message, type });\r\n    setTimeout(() => setToast({ show: false, message: '', type: 'info' }), 4000);\r\n  };\r\n\r\n  // 클라이언트 관리\r\n  const handleAddClient = async (clientData) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/clients`, clientData);\r\n      await fetchClients();\r\n      showToast(`클라이언트 \"${clientData.name}\"이(가) 추가되었습니다.`, 'success');\r\n    } catch (error) {\r\n      console.error('클라이언트 추가 실패:', error);\r\n      showToast('클라이언트 추가 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n    }\r\n  };\r\n\r\n  const handleDeleteClient = async (clientId) => {\r\n    if (!window.confirm('정말로 이 클라이언트를 삭제하시겠습니까?')) return;\r\n    \r\n    try {\r\n      await axios.delete(`${API_BASE_URL}/clients/${clientId}`);\r\n      await fetchClients();\r\n      showToast('클라이언트가 삭제되었습니다.', 'error');\r\n    } catch (error) {\r\n      console.error('클라이언트 삭제 실패:', error);\r\n      showToast('클라이언트 삭제 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n    }\r\n  };\r\n\r\n  const handleClientAction = async (action) => {\r\n    if (!currentClientId) return;\r\n    \r\n    try {\r\n      const client = clients.find(c => c.id === currentClientId);\r\n      if (!client) return;\r\n      \r\n      switch(action) {\r\n        case 'heartbeat':\r\n          showToast(`\"${client.name}\"에 상태 확인 요청을 전송했습니다.`, 'info');\r\n          addClientHistory(currentClientId, '상태 확인 요청');\r\n          break;\r\n        case 'stop_all':\r\n          showToast(`\"${client.name}\"의 모든 프로세스 중지 명령을 전송했습니다.`, 'success');\r\n          addClientHistory(currentClientId, '모든 프로세스 중지됨');\r\n          break;\r\n        case 'delete':\r\n          await handleDeleteClient(currentClientId);\r\n          setShowClientModal(false);\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.error('클라이언트 액션 실패:', error);\r\n      showToast('클라이언트 액션 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n    }\r\n  };\r\n\r\n  // 그룹 관리\r\n  const handleAddGroup = async (groupData) => {\r\n    try {\r\n      await axios.post(`${API_BASE_URL}/groups`, groupData);\r\n      await fetchGroups();\r\n      showToast(`그룹 \"${groupData.name}\"이(가) 생성되었습니다.`, 'success');\r\n    } catch (error) {\r\n      console.error('그룹 추가 실패:', error);\r\n      showToast('그룹 추가 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n    }\r\n  };\r\n\r\n  const handleEditGroup = (groupId) => {\r\n    const group = groups.find(g => g.id === groupId);\r\n    if (group) {\r\n      setEditingGroup(group);\r\n      setShowGroupModal(true);\r\n    }\r\n  };\r\n\r\n  const handleSaveGroup = async (groupData) => {\r\n    try {\r\n      if (editingGroup) {\r\n        await axios.put(`${API_BASE_URL}/groups/${editingGroup.id}`, groupData);\r\n      } else {\r\n        await axios.post(`${API_BASE_URL}/groups`, groupData);\r\n      }\r\n      await fetchGroups();\r\n      setShowGroupModal(false);\r\n      setEditingGroup(null);\r\n      showToast(`그룹 \"${groupData.name}\"이(가) 저장되었습니다.`, 'success');\r\n    } catch (error) {\r\n      console.error('그룹 저장 실패:', error);\r\n      showToast('그룹 저장 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n    }\r\n  };\r\n\r\n  const handleDeleteGroup = async (groupId) => {\r\n    const group = groups.find(g => g.id === groupId);\r\n    if (!group) return;\r\n    \r\n    if (window.confirm(`정말 \"${group.name}\" 그룹을 삭제하시겠습니까?`)) {\r\n      try {\r\n        await axios.delete(`${API_BASE_URL}/groups/${groupId}`);\r\n        await fetchGroups();\r\n        showToast(`그룹 \"${group.name}\"이(가) 삭제되었습니다.`, 'error');\r\n      } catch (error) {\r\n        console.error('그룹 삭제 실패:', error);\r\n        showToast('그룹 삭제 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n      }\r\n    }\r\n  };\r\n\r\n  // 프리셋 관리\r\n  const handleAddPreset = (presetData) => {\r\n    setEditingPreset(null);\r\n    setShowPresetModal(true);\r\n  };\r\n\r\n  const handleEditPreset = (presetId) => {\r\n    const preset = presets.find(p => p.id === presetId);\r\n    if (preset) {\r\n      setEditingPreset(preset);\r\n      setShowPresetModal(true);\r\n    }\r\n  };\r\n\r\n  const handleSavePreset = async (presetData) => {\r\n    try {\r\n      // 새로운 구조에 맞게 데이터 변환\r\n      const presetPayload = {\r\n        name: presetData.name,\r\n        description: presetData.description,\r\n        group_id: presetData.group_id,\r\n        client_commands: presetData.client_commands\r\n      };\r\n\r\n      if (editingPreset) {\r\n        await axios.put(`${API_BASE_URL}/presets/${editingPreset.id}`, presetPayload);\r\n      } else {\r\n        await axios.post(`${API_BASE_URL}/presets`, presetPayload);\r\n      }\r\n      await fetchPresets();\r\n      setShowPresetModal(false);\r\n      setEditingPreset(null);\r\n      showToast(`프리셋 \"${presetData.name}\"이(가) 저장되었습니다.`, 'success');\r\n    } catch (error) {\r\n      console.error('프리셋 저장 실패:', error);\r\n      showToast('프리셋 저장 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n    }\r\n  };\r\n\r\n  const handleDeletePreset = async (presetId) => {\r\n    const preset = presets.find(p => p.id === presetId);\r\n    if (!preset) return;\r\n    \r\n    if (window.confirm(`정말 \"${preset.name}\" 프리셋을 삭제하시겠습니까?\\n실행 중인 경우 자동으로 중지됩니다.`)) {\r\n      try {\r\n        await axios.delete(`${API_BASE_URL}/presets/${presetId}`);\r\n        await fetchPresets();\r\n        showToast(`프리셋 \"${preset.name}\"이(가) 삭제되었습니다.`, 'error');\r\n      } catch (error) {\r\n        console.error('프리셋 삭제 실패:', error);\r\n        showToast('프리셋 삭제 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n      }\r\n    }\r\n  };\r\n\r\n  // 프리셋 실행\r\n  const handleExecutePreset = async (presetId) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/presets/${presetId}/execute`);\r\n      \r\n      // 프리셋을 활성 상태로 변경\r\n      setPresets(prev => prev.map(p => \r\n        p.id === presetId ? { ...p, is_active: true } : p\r\n      ));\r\n      \r\n      showToast(`프리셋이 ${response.data.target_clients?.length || 0}개 클라이언트에서 실행되었습니다.`, 'success');\r\n    } catch (error) {\r\n      console.error('프리셋 실행 실패:', error);\r\n      showToast('프리셋 실행 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n    }\r\n  };\r\n\r\n  // 일괄 제어\r\n  const handleSelectAllPresets = (checked) => {\r\n    if (checked) {\r\n      setSelectedPresets(new Set(presets.map(p => p.id)));\r\n    } else {\r\n      setSelectedPresets(new Set());\r\n    }\r\n  };\r\n\r\n  const handleSelectAllGroups = (checked) => {\r\n    if (checked) {\r\n      setSelectedGroups(new Set(groups.map(g => g.id)));\r\n    } else {\r\n      setSelectedGroups(new Set());\r\n    }\r\n  };\r\n\r\n  const handleBulkPresetAction = (action) => {\r\n    if (selectedPresets.size === 0) {\r\n      showToast('선택된 프리셋이 없습니다.', 'error');\r\n      return;\r\n    }\r\n    \r\n    const actionNames = { execute: '실행', stop: '정지', delete: '삭제' };\r\n    const actionName = actionNames[action];\r\n    const presetCount = selectedPresets.size;\r\n    \r\n    if (action === 'delete') {\r\n      if (window.confirm(`선택된 ${presetCount}개 프리셋을 모두 삭제하시겠습니까?`)) {\r\n        selectedPresets.forEach(presetId => handleDeletePreset(presetId));\r\n        setSelectedPresets(new Set());\r\n      }\r\n    } else if (action === 'execute') {\r\n      if (window.confirm(`선택된 ${presetCount}개 프리셋을 모두 실행하시겠습니까?`)) {\r\n        let executed = 0;\r\n        selectedPresets.forEach(presetId => {\r\n          const preset = presets.find(p => p.id === presetId);\r\n          if (preset && !preset.is_active) {\r\n            handleExecutePreset(presetId);\r\n            executed++;\r\n          }\r\n        });\r\n        showToast(`${executed}개 프리셋이 실행되었습니다.`, 'success');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleBulkGroupAction = (action) => {\r\n    if (selectedGroups.size === 0) {\r\n      showToast('선택된 그룹이 없습니다.', 'error');\r\n      return;\r\n    }\r\n    \r\n    const actionNames = { on: '켜기', reboot: '재부팅', off: '끄기' };\r\n    const actionName = actionNames[action];\r\n    const groupCount = selectedGroups.size;\r\n    \r\n    if (window.confirm(`선택된 ${groupCount}개 그룹의 모든 디스플레이 서버를 ${actionName} 하시겠습니까?`)) {\r\n      let totalClients = 0;\r\n      selectedGroups.forEach(groupId => {\r\n        const group = groups.find(g => g.id === groupId);\r\n        if (group) {\r\n          totalClients += group.client_ids.length;\r\n          group.client_ids.forEach(clientId => {\r\n            addClientHistory(clientId, `전원 ${actionName} 명령 수신`);\r\n          });\r\n        }\r\n      });\r\n      \r\n      showToast(`${groupCount}개 그룹 (${totalClients}대 클라이언트)에 전원 ${actionName} 명령을 전송했습니다. (v2.1에서 활성화)`, 'info');\r\n    }\r\n  };\r\n\r\n  // 데모 데이터 생성\r\n  const createDemoData = () => {\r\n    setTimeout(() => {\r\n      // 데모 클라이언트\r\n      const demoClients = [\r\n        { name: 'Display_01', ip_address: '192.168.1.101', status: 'online' },\r\n        { name: 'Display_02', ip_address: '192.168.1.102', status: 'running' },\r\n        { name: 'Display_03', ip_address: '192.168.1.103', status: 'offline' },\r\n        { name: 'Display_04', ip_address: '192.168.1.104', status: 'online' }\r\n      ];\r\n      \r\n      const newClients = demoClients.map((clientData, index) => ({\r\n        id: `demo_client_${index + 1}`,\r\n        name: clientData.name,\r\n        ip_address: clientData.ip_address,\r\n        port: 8081,\r\n        description: `데모 클라이언트 ${index + 1}`,\r\n        status: clientData.status,\r\n        created_at: new Date(Date.now() - (index * 86400000)),\r\n        last_seen: clientData.status !== 'offline' ? new Date() : null\r\n      }));\r\n      \r\n      setClients(newClients);\r\n      newClients.forEach(client => addClientHistory(client.id, '데모 데이터로 생성됨'));\r\n      \r\n      // 데모 그룹\r\n      setTimeout(() => {\r\n        const demoGroup = {\r\n          id: 'demo_group_1',\r\n          name: '메인 디스플레이 월',\r\n          description: '중앙 메인 디스플레이 구역',\r\n          client_ids: ['demo_client_1', 'demo_client_2', 'demo_client_4'],\r\n          created_at: new Date()\r\n        };\r\n        \r\n        setGroups([demoGroup]);\r\n      }, 500);\r\n      \r\n      // 데모 프리셋\r\n      setTimeout(() => {\r\n        const demoPreset = {\r\n          id: 'demo_preset_1',\r\n          name: '메인 콘텐츠 재생',\r\n          description: '4K 메인 콘텐츠 스트리밍',\r\n          group_id: 'demo_group_1',\r\n          client_commands: {\r\n            'demo_client_1': 'D:\\\\UnrealProjects\\\\MainContent\\\\Windows\\\\MainContent.exe -dc_node=Node_0 -fullscreen',\r\n            'demo_client_2': 'D:\\\\UnrealProjects\\\\MainContent\\\\Windows\\\\MainContent.exe -dc_node=Node_1 -fullscreen',\r\n            'demo_client_4': 'D:\\\\UnrealProjects\\\\MainContent\\\\Windows\\\\MainContent.exe -dc_node=Node_2 -fullscreen'\r\n          },\r\n          created_at: new Date(),\r\n          is_active: false\r\n        };\r\n        \r\n        setPresets([demoPreset]);\r\n      }, 1000);\r\n      \r\n      showToast('데모 데이터가 로드되었습니다. 실제 환경에서는 서버와 연동됩니다.', 'info');\r\n    }, 3000);\r\n  };\r\n\r\n  // 통계 계산\r\n  const stats = {\r\n    totalClients: clients.length,\r\n    onlineClients: clients.filter(c => c.status === 'online' || c.status === 'running').length,\r\n    runningClients: clients.filter(c => c.status === 'running').length,\r\n    totalGroups: groups.length\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header \r\n        isDarkMode={isDarkMode}\r\n        isSocketConnected={isSocketConnected}\r\n        currentTime={currentTime}\r\n        connectedCount={stats.onlineClients}\r\n        onToggleDarkMode={toggleDarkMode}\r\n      />\r\n      \r\n      <div className=\"container\">\r\n        <StatsBar stats={stats} />\r\n        \r\n        <div className=\"main-layout\">\r\n          <PresetSection \r\n            presets={presets}\r\n            groups={groups}\r\n            selectedPresets={selectedPresets}\r\n            onSelectAll={handleSelectAllPresets}\r\n            onBulkAction={handleBulkPresetAction}\r\n            onAddPreset={() => {\r\n              console.log('새 프리셋 버튼 클릭됨');\r\n              console.log('현재 showPresetModal 상태:', showPresetModal);\r\n              setEditingPreset(null);\r\n              setShowPresetModal(true);\r\n              console.log('showPresetModal을 true로 설정함');\r\n            }}\r\n            onEditPreset={handleEditPreset}\r\n            onDeletePreset={handleDeletePreset}\r\n            onExecutePreset={handleExecutePreset}\r\n            onSelectPreset={(presetId, selected) => {\r\n              setSelectedPresets(prev => {\r\n                const newSet = new Set(prev);\r\n                if (selected) {\r\n                  newSet.add(presetId);\r\n                } else {\r\n                  newSet.delete(presetId);\r\n                }\r\n                return newSet;\r\n              });\r\n            }}\r\n          />\r\n          \r\n          <GroupSection \r\n            groups={groups}\r\n            clients={clients}\r\n            selectedGroups={selectedGroups}\r\n            onSelectAll={handleSelectAllGroups}\r\n            onBulkAction={handleBulkGroupAction}\r\n            onAddGroup={() => {\r\n              console.log('새 그룹 버튼 클릭됨');\r\n              setEditingGroup(null);\r\n              setShowGroupModal(true);\r\n            }}\r\n            onEditGroup={handleEditGroup}\r\n            onDeleteGroup={handleDeleteGroup}\r\n            onSelectGroup={(groupId, selected) => {\r\n              setSelectedGroups(prev => {\r\n                const newSet = new Set(prev);\r\n                if (selected) {\r\n                  newSet.add(groupId);\r\n                } else {\r\n                  newSet.delete(groupId);\r\n                }\r\n                return newSet;\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n        \r\n        <ClientMonitor \r\n          clients={clients}\r\n          onAddClient={() => {\r\n            console.log('새 클라이언트 버튼 클릭됨');\r\n            setEditingClient(null);\r\n            setShowClientModal(true);\r\n          }}\r\n          onClientClick={(clientId) => {\r\n            setCurrentClientId(clientId);\r\n            setShowClientModal(true);\r\n          }}\r\n        />\r\n      </div>\r\n      \r\n      {/* 모달들 */}\r\n      {showClientModal && (\r\n        <ClientDetailModal \r\n          client={clients.find(c => c.id === currentClientId)}\r\n          history={clientHistory[currentClientId] || []}\r\n          onClose={() => setShowClientModal(false)}\r\n          onAction={handleClientAction}\r\n          onDelete={() => {\r\n            setCurrentClientId(null);\r\n            setShowClientModal(false);\r\n          }}\r\n        />\r\n      )}\r\n      \r\n      {showAddClientModal && (\r\n        <AddClientModal \r\n          onClose={() => setShowAddClientModal(false)}\r\n          onAddClient={handleAddClient}\r\n        />\r\n      )}\r\n      \r\n      {showPresetModal && (\r\n        <PresetModal \r\n          onClose={() => {\r\n            console.log('PresetModal 닫기 호출됨');\r\n            setShowPresetModal(false);\r\n            setEditingPreset(null);\r\n          }}\r\n          onSave={handleSavePreset}\r\n          editingPreset={editingPreset}\r\n          groups={groups}\r\n          clients={clients}\r\n        />\r\n      )}\r\n      \r\n      {showGroupModal && (\r\n        <GroupModal \r\n          onClose={() => {\r\n            setShowGroupModal(false);\r\n            setEditingGroup(null);\r\n          }}\r\n          onSave={handleSaveGroup}\r\n          editingGroup={editingGroup}\r\n          clients={clients}\r\n        />\r\n      )}\r\n      \r\n      {/* 토스트 */}\r\n      <Toast \r\n        show={toast.show}\r\n        message={toast.message}\r\n        type={toast.type}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}