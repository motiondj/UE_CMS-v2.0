{"ast":null,"code":"import React,{useState,useEffect}from'react';import io from'socket.io-client';import axios from'axios';import'./App.css';// 컴포넌트들\nimport Header from'./components/Header';import StatsBar from'./components/StatsBar';import PresetSection from'./components/PresetSection';import GroupSection from'./components/GroupSection';import ClientMonitor from'./components/ClientMonitor';import ExecutionMonitor from'./components/ExecutionMonitor';import ClientDetailModal from'./components/ClientDetailModal';import Toast from'./components/Toast';// API 기본 URL\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_BASE_URL='http://localhost:8000/api';function App(){// 기본 상태 관리\nconst[socket,setSocket]=useState(null);const[isConnected,setIsConnected]=useState(false);const[isDarkMode,setIsDarkMode]=useState(false);const[currentTime,setCurrentTime]=useState(new Date());// 데이터 상태\nconst[clients,setClients]=useState([]);const[groups,setGroups]=useState([]);const[presets,setPresets]=useState([]);const[executions,setExecutions]=useState([]);// 선택 상태\nconst[selectedClients,setSelectedClients]=useState(new Set());const[selectedGroups,setSelectedGroups]=useState(new Set());const[selectedPresets,setSelectedPresets]=useState(new Set());// 모달 상태\nconst[showClientModal,setShowClientModal]=useState(false);const[showGroupModal,setShowGroupModal]=useState(false);const[showPresetModal,setShowPresetModal]=useState(false);const[showAddClientModal,setShowAddClientModal]=useState(false);const[currentClient,setCurrentClient]=useState(null);const[editingPreset,setEditingPreset]=useState(null);const[editingGroup,setEditingGroup]=useState(null);// 폼 상태\nconst[newClient,setNewClient]=useState({name:'',ip_address:'',port:8081,description:''});const[newGroup,setNewGroup]=useState({name:'',description:'',client_ids:[]});const[newPreset,setNewPreset]=useState({name:'',description:'',command:'',group_ids:[]});// 토스트 알림\nconst[toast,setToast]=useState({show:false,message:'',type:'info'});// Socket.io 연결\nuseEffect(()=>{const newSocket=io('http://localhost:8000');setSocket(newSocket);newSocket.on('connect',()=>{console.log('✅ Socket.io 연결됨');setIsConnected(true);showToast('서버에 연결되었습니다.','success');});newSocket.on('disconnect',()=>{console.log('❌ Socket.io 연결 해제됨');setIsConnected(false);showToast('서버 연결이 끊어졌습니다.','error');});newSocket.on('client_status_changed',data=>{console.log('클라이언트 상태 변경:',data);fetchClients();});return()=>newSocket.close();},[]);// 초기 데이터 로드\nuseEffect(()=>{fetchClients();fetchGroups();fetchPresets();},[]);// 시간 업데이트\nuseEffect(()=>{const timer=setInterval(()=>{setCurrentTime(new Date());},1000);return()=>clearInterval(timer);},[]);// 테마 초기화\nuseEffect(()=>{const savedTheme=localStorage.getItem('theme');if(savedTheme==='dark'){setIsDarkMode(true);}},[]);// 테마 변경\nuseEffect(()=>{const body=document.body;if(isDarkMode){body.setAttribute('data-theme','dark');localStorage.setItem('theme','dark');}else{body.removeAttribute('data-theme');localStorage.setItem('theme','light');}},[isDarkMode]);// API 함수들\nconst fetchClients=async()=>{try{const response=await axios.get(\"\".concat(API_BASE_URL,\"/clients\"));setClients(response.data);}catch(error){console.error('클라이언트 조회 실패:',error);}};const fetchGroups=async()=>{try{const response=await axios.get(\"\".concat(API_BASE_URL,\"/groups\"));setGroups(response.data);}catch(error){console.error('그룹 조회 실패:',error);}};const fetchPresets=async()=>{try{const response=await axios.get(\"\".concat(API_BASE_URL,\"/presets\"));setPresets(response.data);}catch(error){console.error('프리셋 조회 실패:',error);}};// 통계 계산\nconst getStats=()=>{const onlineClients=clients.filter(c=>c.status==='online'||c.status==='running').length;const runningClients=clients.filter(c=>c.status==='running').length;const activeExecutions=executions.filter(e=>e.status==='running').length;return{totalClients:clients.length,onlineClients,runningClients,activeExecutions,totalGroups:groups.length};};// 토스트 알림\nconst showToast=function(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'info';setToast({show:true,message,type});setTimeout(()=>setToast({show:false,message:'',type:'info'}),4000);};// 테마 토글\nconst toggleDarkMode=()=>{setIsDarkMode(!isDarkMode);showToast(isDarkMode?'라이트 모드가 활성화되었습니다.':'다크 모드가 활성화되었습니다.','success');};// 프리셋 관련 함수들\nconst toggleSelectAllPresets=()=>{if(selectedPresets.size===presets.length){setSelectedPresets(new Set());}else{setSelectedPresets(new Set(presets.map(p=>p.id)));}};const toggleSelectPreset=presetId=>{const newSelected=new Set(selectedPresets);if(newSelected.has(presetId)){newSelected.delete(presetId);}else{newSelected.add(presetId);}setSelectedPresets(newSelected);};const bulkPresetAction=async action=>{if(selectedPresets.size===0){showToast('선택된 프리셋이 없습니다.','error');return;}const actionNames={execute:'실행',stop:'정지',delete:'삭제'};const actionName=actionNames[action];const presetCount=selectedPresets.size;if(action==='delete'){if(window.confirm(\"\\uC120\\uD0DD\\uB41C \".concat(presetCount,\"\\uAC1C \\uD504\\uB9AC\\uC14B\\uC744 \\uBAA8\\uB450 \\uC0AD\\uC81C\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\"))){// 삭제 로직\nshowToast(\"\".concat(presetCount,\"\\uAC1C \\uD504\\uB9AC\\uC14B\\uC774 \\uC0AD\\uC81C\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'error');setSelectedPresets(new Set());}}else if(action==='execute'){if(window.confirm(\"\\uC120\\uD0DD\\uB41C \".concat(presetCount,\"\\uAC1C \\uD504\\uB9AC\\uC14B\\uC744 \\uBAA8\\uB450 \\uC2E4\\uD589\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\"))){// 실행 로직\nshowToast(\"\".concat(presetCount,\"\\uAC1C \\uD504\\uB9AC\\uC14B\\uC774 \\uC2E4\\uD589\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'success');}}else if(action==='stop'){if(window.confirm(\"\\uC120\\uD0DD\\uB41C \".concat(presetCount,\"\\uAC1C \\uD504\\uB9AC\\uC14B\\uC744 \\uBAA8\\uB450 \\uC815\\uC9C0\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\"))){// 정지 로직\nshowToast(\"\".concat(presetCount,\"\\uAC1C \\uD504\\uB9AC\\uC14B\\uC774 \\uC815\\uC9C0\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'success');}}};const executePreset=async presetId=>{try{const response=await axios.post(\"\".concat(API_BASE_URL,\"/presets/\").concat(presetId,\"/execute\"));showToast('프리셋이 실행되었습니다.','success');fetchClients();// 클라이언트 상태 업데이트\n}catch(error){var _error$response,_error$response$data;console.error('프리셋 실행 실패:',error);showToast('프리셋 실행 실패: '+(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||error.message),'error');}};const editPreset=preset=>{setEditingPreset(preset);setNewPreset({name:preset.name,description:preset.description||'',command:preset.command,group_ids:preset.group_ids||[]});setShowPresetModal(true);};const deletePreset=async presetId=>{if(!window.confirm('정말로 이 프리셋을 삭제하시겠습니까?'))return;try{await axios.delete(\"\".concat(API_BASE_URL,\"/presets/\").concat(presetId));fetchPresets();showToast('프리셋이 삭제되었습니다.','error');}catch(error){var _error$response2,_error$response2$data;console.error('프리셋 삭제 실패:',error);showToast('프리셋 삭제 실패: '+(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||error.message),'error');}};// 그룹 관련 함수들\nconst toggleSelectAllGroups=()=>{if(selectedGroups.size===groups.length){setSelectedGroups(new Set());}else{setSelectedGroups(new Set(groups.map(g=>g.id)));}};const toggleSelectGroup=groupId=>{const newSelected=new Set(selectedGroups);if(newSelected.has(groupId)){newSelected.delete(groupId);}else{newSelected.add(groupId);}setSelectedGroups(newSelected);};const bulkGroupAction=action=>{if(selectedGroups.size===0){showToast('선택된 그룹이 없습니다.','error');return;}const actionNames={on:'켜기',reboot:'재부팅',off:'끄기'};const actionName=actionNames[action];const groupCount=selectedGroups.size;if(window.confirm(\"\\uC120\\uD0DD\\uB41C \".concat(groupCount,\"\\uAC1C \\uADF8\\uB8F9\\uC758 \\uBAA8\\uB4E0 \\uB514\\uC2A4\\uD50C\\uB808\\uC774 \\uC11C\\uBC84\\uB97C \").concat(actionName,\" \\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\"))){showToast(\"\".concat(groupCount,\"\\uAC1C \\uADF8\\uB8F9\\uC5D0 \\uC804\\uC6D0 \").concat(actionName,\" \\uBA85\\uB839\\uC744 \\uC804\\uC1A1\\uD588\\uC2B5\\uB2C8\\uB2E4. (v2.1\\uC5D0\\uC11C \\uD65C\\uC131\\uD654)\"),'info');}};const editGroup=group=>{setEditingGroup(group);setNewGroup({name:group.name,description:group.description||'',client_ids:group.client_ids||[]});setShowGroupModal(true);};const deleteGroup=async groupId=>{if(!window.confirm('정말로 이 그룹을 삭제하시겠습니까?'))return;try{await axios.delete(\"\".concat(API_BASE_URL,\"/groups/\").concat(groupId));fetchGroups();showToast('그룹이 삭제되었습니다.','error');}catch(error){var _error$response3,_error$response3$data;console.error('그룹 삭제 실패:',error);showToast('그룹 삭제 실패: '+(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||error.message),'error');}};// 클라이언트 관련 함수들\nconst showClientDetail=client=>{setCurrentClient(client);setShowClientModal(true);};const clientAction=action=>{if(!currentClient)return;switch(action){case'heartbeat':showToast(\"\\\"\".concat(currentClient.name,\"\\\"\\uC5D0 \\uC0C1\\uD0DC \\uD655\\uC778 \\uC694\\uCCAD\\uC744 \\uC804\\uC1A1\\uD588\\uC2B5\\uB2C8\\uB2E4.\"),'info');break;case'stop_all':showToast(\"\\\"\".concat(currentClient.name,\"\\\"\\uC758 \\uBAA8\\uB4E0 \\uD504\\uB85C\\uC138\\uC2A4 \\uC911\\uC9C0 \\uBA85\\uB839\\uC744 \\uC804\\uC1A1\\uD588\\uC2B5\\uB2C8\\uB2E4.\"),'success');break;case'delete':if(window.confirm(\"\\uC815\\uB9D0\\uB85C \\\"\".concat(currentClient.name,\"\\\"\\uC744(\\uB97C) \\uC0AD\\uC81C\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\"))){showToast(\"\\\"\".concat(currentClient.name,\"\\\"\\uC774(\\uAC00) \\uC0AD\\uC81C\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"),'error');setShowClientModal(false);}break;}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Header,{isConnected:isConnected,currentTime:currentTime,connectedCount:getStats().onlineClients,isDarkMode:isDarkMode,onToggleDarkMode:toggleDarkMode}),/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(StatsBar,{stats:getStats()}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-layout\",children:[/*#__PURE__*/_jsx(PresetSection,{presets:presets,groups:groups,selectedPresets:selectedPresets,onSelectAllPresets:toggleSelectAllPresets,onSelectPreset:toggleSelectPreset,onBulkPresetAction:bulkPresetAction,onShowAddPresetModal:()=>setShowPresetModal(true),onExecutePreset:executePreset,onEditPreset:editPreset,onDeletePreset:deletePreset}),/*#__PURE__*/_jsx(GroupSection,{groups:groups,clients:clients,selectedGroups:selectedGroups,onSelectAllGroups:toggleSelectAllGroups,onSelectGroup:toggleSelectGroup,onBulkGroupAction:bulkGroupAction,onShowAddGroupModal:()=>setShowGroupModal(true),onEditGroup:editGroup,onDeleteGroup:deleteGroup})]}),/*#__PURE__*/_jsx(ClientMonitor,{clients:clients,onShowAddClientModal:()=>setShowAddClientModal(true),onShowClientDetail:showClientDetail}),executions.length>0&&/*#__PURE__*/_jsx(ExecutionMonitor,{executions:executions})]}),showClientModal&&currentClient&&/*#__PURE__*/_jsx(ClientDetailModal,{client:currentClient,onClose:()=>setShowClientModal(false),onAction:clientAction}),/*#__PURE__*/_jsx(Toast,{toast:toast})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","io","axios","Header","StatsBar","PresetSection","GroupSection","ClientMonitor","ExecutionMonitor","ClientDetailModal","Toast","jsx","_jsx","jsxs","_jsxs","API_BASE_URL","App","socket","setSocket","isConnected","setIsConnected","isDarkMode","setIsDarkMode","currentTime","setCurrentTime","Date","clients","setClients","groups","setGroups","presets","setPresets","executions","setExecutions","selectedClients","setSelectedClients","Set","selectedGroups","setSelectedGroups","selectedPresets","setSelectedPresets","showClientModal","setShowClientModal","showGroupModal","setShowGroupModal","showPresetModal","setShowPresetModal","showAddClientModal","setShowAddClientModal","currentClient","setCurrentClient","editingPreset","setEditingPreset","editingGroup","setEditingGroup","newClient","setNewClient","name","ip_address","port","description","newGroup","setNewGroup","client_ids","newPreset","setNewPreset","command","group_ids","toast","setToast","show","message","type","newSocket","on","console","log","showToast","data","fetchClients","close","fetchGroups","fetchPresets","timer","setInterval","clearInterval","savedTheme","localStorage","getItem","body","document","setAttribute","setItem","removeAttribute","response","get","concat","error","getStats","onlineClients","filter","c","status","length","runningClients","activeExecutions","e","totalClients","totalGroups","arguments","undefined","setTimeout","toggleDarkMode","toggleSelectAllPresets","size","map","p","id","toggleSelectPreset","presetId","newSelected","has","delete","add","bulkPresetAction","action","actionNames","execute","stop","actionName","presetCount","window","confirm","executePreset","post","_error$response","_error$response$data","editPreset","preset","deletePreset","_error$response2","_error$response2$data","toggleSelectAllGroups","g","toggleSelectGroup","groupId","bulkGroupAction","reboot","off","groupCount","editGroup","group","deleteGroup","_error$response3","_error$response3$data","showClientDetail","client","clientAction","className","children","connectedCount","onToggleDarkMode","stats","onSelectAllPresets","onSelectPreset","onBulkPresetAction","onShowAddPresetModal","onExecutePreset","onEditPreset","onDeletePreset","onSelectAllGroups","onSelectGroup","onBulkGroupAction","onShowAddGroupModal","onEditGroup","onDeleteGroup","onShowAddClientModal","onShowClientDetail","onClose","onAction"],"sources":["D:/ProgramDevelop/switchboard-plus-v2/web-ui-react/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\n// 컴포넌트들\r\nimport Header from './components/Header';\r\nimport StatsBar from './components/StatsBar';\r\nimport PresetSection from './components/PresetSection';\r\nimport GroupSection from './components/GroupSection';\r\nimport ClientMonitor from './components/ClientMonitor';\r\nimport ExecutionMonitor from './components/ExecutionMonitor';\r\nimport ClientDetailModal from './components/ClientDetailModal';\r\nimport Toast from './components/Toast';\r\n\r\n// API 기본 URL\r\nconst API_BASE_URL = 'http://localhost:8000/api';\r\n\r\nfunction App() {\r\n  // 기본 상태 관리\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  \r\n  // 데이터 상태\r\n  const [clients, setClients] = useState([]);\r\n  const [groups, setGroups] = useState([]);\r\n  const [presets, setPresets] = useState([]);\r\n  const [executions, setExecutions] = useState([]);\r\n  \r\n  // 선택 상태\r\n  const [selectedClients, setSelectedClients] = useState(new Set());\r\n  const [selectedGroups, setSelectedGroups] = useState(new Set());\r\n  const [selectedPresets, setSelectedPresets] = useState(new Set());\r\n  \r\n  // 모달 상태\r\n  const [showClientModal, setShowClientModal] = useState(false);\r\n  const [showGroupModal, setShowGroupModal] = useState(false);\r\n  const [showPresetModal, setShowPresetModal] = useState(false);\r\n  const [showAddClientModal, setShowAddClientModal] = useState(false);\r\n  const [currentClient, setCurrentClient] = useState(null);\r\n  const [editingPreset, setEditingPreset] = useState(null);\r\n  const [editingGroup, setEditingGroup] = useState(null);\r\n  \r\n  // 폼 상태\r\n  const [newClient, setNewClient] = useState({ name: '', ip_address: '', port: 8081, description: '' });\r\n  const [newGroup, setNewGroup] = useState({ name: '', description: '', client_ids: [] });\r\n  const [newPreset, setNewPreset] = useState({ name: '', description: '', command: '', group_ids: [] });\r\n  \r\n  // 토스트 알림\r\n  const [toast, setToast] = useState({ show: false, message: '', type: 'info' });\r\n\r\n  // Socket.io 연결\r\n  useEffect(() => {\r\n    const newSocket = io('http://localhost:8000');\r\n    setSocket(newSocket);\r\n\r\n    newSocket.on('connect', () => {\r\n      console.log('✅ Socket.io 연결됨');\r\n      setIsConnected(true);\r\n      showToast('서버에 연결되었습니다.', 'success');\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      console.log('❌ Socket.io 연결 해제됨');\r\n      setIsConnected(false);\r\n      showToast('서버 연결이 끊어졌습니다.', 'error');\r\n    });\r\n\r\n    newSocket.on('client_status_changed', (data) => {\r\n      console.log('클라이언트 상태 변경:', data);\r\n      fetchClients();\r\n    });\r\n\r\n    return () => newSocket.close();\r\n  }, []);\r\n\r\n  // 초기 데이터 로드\r\n  useEffect(() => {\r\n    fetchClients();\r\n    fetchGroups();\r\n    fetchPresets();\r\n  }, []);\r\n\r\n  // 시간 업데이트\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 1000);\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  // 테마 초기화\r\n  useEffect(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    if (savedTheme === 'dark') {\r\n      setIsDarkMode(true);\r\n    }\r\n  }, []);\r\n\r\n  // 테마 변경\r\n  useEffect(() => {\r\n    const body = document.body;\r\n    if (isDarkMode) {\r\n      body.setAttribute('data-theme', 'dark');\r\n      localStorage.setItem('theme', 'dark');\r\n    } else {\r\n      body.removeAttribute('data-theme');\r\n      localStorage.setItem('theme', 'light');\r\n    }\r\n  }, [isDarkMode]);\r\n\r\n  // API 함수들\r\n  const fetchClients = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/clients`);\r\n      setClients(response.data);\r\n    } catch (error) {\r\n      console.error('클라이언트 조회 실패:', error);\r\n    }\r\n  };\r\n\r\n  const fetchGroups = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/groups`);\r\n      setGroups(response.data);\r\n    } catch (error) {\r\n      console.error('그룹 조회 실패:', error);\r\n    }\r\n  };\r\n\r\n  const fetchPresets = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/presets`);\r\n      setPresets(response.data);\r\n    } catch (error) {\r\n      console.error('프리셋 조회 실패:', error);\r\n    }\r\n  };\r\n\r\n  // 통계 계산\r\n  const getStats = () => {\r\n    const onlineClients = clients.filter(c => c.status === 'online' || c.status === 'running').length;\r\n    const runningClients = clients.filter(c => c.status === 'running').length;\r\n    const activeExecutions = executions.filter(e => e.status === 'running').length;\r\n    \r\n    return {\r\n      totalClients: clients.length,\r\n      onlineClients,\r\n      runningClients,\r\n      activeExecutions,\r\n      totalGroups: groups.length\r\n    };\r\n  };\r\n\r\n  // 토스트 알림\r\n  const showToast = (message, type = 'info') => {\r\n    setToast({ show: true, message, type });\r\n    setTimeout(() => setToast({ show: false, message: '', type: 'info' }), 4000);\r\n  };\r\n\r\n  // 테마 토글\r\n  const toggleDarkMode = () => {\r\n    setIsDarkMode(!isDarkMode);\r\n    showToast(isDarkMode ? '라이트 모드가 활성화되었습니다.' : '다크 모드가 활성화되었습니다.', 'success');\r\n  };\r\n\r\n  // 프리셋 관련 함수들\r\n  const toggleSelectAllPresets = () => {\r\n    if (selectedPresets.size === presets.length) {\r\n      setSelectedPresets(new Set());\r\n    } else {\r\n      setSelectedPresets(new Set(presets.map(p => p.id)));\r\n    }\r\n  };\r\n\r\n  const toggleSelectPreset = (presetId) => {\r\n    const newSelected = new Set(selectedPresets);\r\n    if (newSelected.has(presetId)) {\r\n      newSelected.delete(presetId);\r\n    } else {\r\n      newSelected.add(presetId);\r\n    }\r\n    setSelectedPresets(newSelected);\r\n  };\r\n\r\n  const bulkPresetAction = async (action) => {\r\n    if (selectedPresets.size === 0) {\r\n      showToast('선택된 프리셋이 없습니다.', 'error');\r\n      return;\r\n    }\r\n\r\n    const actionNames = { execute: '실행', stop: '정지', delete: '삭제' };\r\n    const actionName = actionNames[action];\r\n    const presetCount = selectedPresets.size;\r\n\r\n    if (action === 'delete') {\r\n      if (window.confirm(`선택된 ${presetCount}개 프리셋을 모두 삭제하시겠습니까?`)) {\r\n        // 삭제 로직\r\n        showToast(`${presetCount}개 프리셋이 삭제되었습니다.`, 'error');\r\n        setSelectedPresets(new Set());\r\n      }\r\n    } else if (action === 'execute') {\r\n      if (window.confirm(`선택된 ${presetCount}개 프리셋을 모두 실행하시겠습니까?`)) {\r\n        // 실행 로직\r\n        showToast(`${presetCount}개 프리셋이 실행되었습니다.`, 'success');\r\n      }\r\n    } else if (action === 'stop') {\r\n      if (window.confirm(`선택된 ${presetCount}개 프리셋을 모두 정지하시겠습니까?`)) {\r\n        // 정지 로직\r\n        showToast(`${presetCount}개 프리셋이 정지되었습니다.`, 'success');\r\n      }\r\n    }\r\n  };\r\n\r\n  const executePreset = async (presetId) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/presets/${presetId}/execute`);\r\n      showToast('프리셋이 실행되었습니다.', 'success');\r\n      fetchClients(); // 클라이언트 상태 업데이트\r\n    } catch (error) {\r\n      console.error('프리셋 실행 실패:', error);\r\n      showToast('프리셋 실행 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n    }\r\n  };\r\n\r\n  const editPreset = (preset) => {\r\n    setEditingPreset(preset);\r\n    setNewPreset({\r\n      name: preset.name,\r\n      description: preset.description || '',\r\n      command: preset.command,\r\n      group_ids: preset.group_ids || []\r\n    });\r\n    setShowPresetModal(true);\r\n  };\r\n\r\n  const deletePreset = async (presetId) => {\r\n    if (!window.confirm('정말로 이 프리셋을 삭제하시겠습니까?')) return;\r\n    \r\n    try {\r\n      await axios.delete(`${API_BASE_URL}/presets/${presetId}`);\r\n      fetchPresets();\r\n      showToast('프리셋이 삭제되었습니다.', 'error');\r\n    } catch (error) {\r\n      console.error('프리셋 삭제 실패:', error);\r\n      showToast('프리셋 삭제 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n    }\r\n  };\r\n\r\n  // 그룹 관련 함수들\r\n  const toggleSelectAllGroups = () => {\r\n    if (selectedGroups.size === groups.length) {\r\n      setSelectedGroups(new Set());\r\n    } else {\r\n      setSelectedGroups(new Set(groups.map(g => g.id)));\r\n    }\r\n  };\r\n\r\n  const toggleSelectGroup = (groupId) => {\r\n    const newSelected = new Set(selectedGroups);\r\n    if (newSelected.has(groupId)) {\r\n      newSelected.delete(groupId);\r\n    } else {\r\n      newSelected.add(groupId);\r\n    }\r\n    setSelectedGroups(newSelected);\r\n  };\r\n\r\n  const bulkGroupAction = (action) => {\r\n    if (selectedGroups.size === 0) {\r\n      showToast('선택된 그룹이 없습니다.', 'error');\r\n      return;\r\n    }\r\n\r\n    const actionNames = { on: '켜기', reboot: '재부팅', off: '끄기' };\r\n    const actionName = actionNames[action];\r\n    const groupCount = selectedGroups.size;\r\n\r\n    if (window.confirm(`선택된 ${groupCount}개 그룹의 모든 디스플레이 서버를 ${actionName} 하시겠습니까?`)) {\r\n      showToast(`${groupCount}개 그룹에 전원 ${actionName} 명령을 전송했습니다. (v2.1에서 활성화)`, 'info');\r\n    }\r\n  };\r\n\r\n  const editGroup = (group) => {\r\n    setEditingGroup(group);\r\n    setNewGroup({\r\n      name: group.name,\r\n      description: group.description || '',\r\n      client_ids: group.client_ids || []\r\n    });\r\n    setShowGroupModal(true);\r\n  };\r\n\r\n  const deleteGroup = async (groupId) => {\r\n    if (!window.confirm('정말로 이 그룹을 삭제하시겠습니까?')) return;\r\n    \r\n    try {\r\n      await axios.delete(`${API_BASE_URL}/groups/${groupId}`);\r\n      fetchGroups();\r\n      showToast('그룹이 삭제되었습니다.', 'error');\r\n    } catch (error) {\r\n      console.error('그룹 삭제 실패:', error);\r\n      showToast('그룹 삭제 실패: ' + (error.response?.data?.error || error.message), 'error');\r\n    }\r\n  };\r\n\r\n  // 클라이언트 관련 함수들\r\n  const showClientDetail = (client) => {\r\n    setCurrentClient(client);\r\n    setShowClientModal(true);\r\n  };\r\n\r\n  const clientAction = (action) => {\r\n    if (!currentClient) return;\r\n    \r\n    switch(action) {\r\n      case 'heartbeat':\r\n        showToast(`\"${currentClient.name}\"에 상태 확인 요청을 전송했습니다.`, 'info');\r\n        break;\r\n      case 'stop_all':\r\n        showToast(`\"${currentClient.name}\"의 모든 프로세스 중지 명령을 전송했습니다.`, 'success');\r\n        break;\r\n      case 'delete':\r\n        if (window.confirm(`정말로 \"${currentClient.name}\"을(를) 삭제하시겠습니까?`)) {\r\n          showToast(`\"${currentClient.name}\"이(가) 삭제되었습니다.`, 'error');\r\n          setShowClientModal(false);\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header \r\n        isConnected={isConnected}\r\n        currentTime={currentTime}\r\n        connectedCount={getStats().onlineClients}\r\n        isDarkMode={isDarkMode}\r\n        onToggleDarkMode={toggleDarkMode}\r\n      />\r\n\r\n      <div className=\"container\">\r\n        <StatsBar stats={getStats()} />\r\n\r\n        <div className=\"main-layout\">\r\n          <PresetSection \r\n            presets={presets}\r\n            groups={groups}\r\n            selectedPresets={selectedPresets}\r\n            onSelectAllPresets={toggleSelectAllPresets}\r\n            onSelectPreset={toggleSelectPreset}\r\n            onBulkPresetAction={bulkPresetAction}\r\n            onShowAddPresetModal={() => setShowPresetModal(true)}\r\n            onExecutePreset={executePreset}\r\n            onEditPreset={editPreset}\r\n            onDeletePreset={deletePreset}\r\n          />\r\n\r\n          <GroupSection \r\n            groups={groups}\r\n            clients={clients}\r\n            selectedGroups={selectedGroups}\r\n            onSelectAllGroups={toggleSelectAllGroups}\r\n            onSelectGroup={toggleSelectGroup}\r\n            onBulkGroupAction={bulkGroupAction}\r\n            onShowAddGroupModal={() => setShowGroupModal(true)}\r\n            onEditGroup={editGroup}\r\n            onDeleteGroup={deleteGroup}\r\n          />\r\n        </div>\r\n\r\n        <ClientMonitor \r\n          clients={clients}\r\n          onShowAddClientModal={() => setShowAddClientModal(true)}\r\n          onShowClientDetail={showClientDetail}\r\n        />\r\n\r\n        {executions.length > 0 && (\r\n          <ExecutionMonitor executions={executions} />\r\n        )}\r\n      </div>\r\n\r\n      {/* 모달들 */}\r\n      {showClientModal && currentClient && (\r\n        <ClientDetailModal \r\n          client={currentClient}\r\n          onClose={() => setShowClientModal(false)}\r\n          onAction={clientAction}\r\n        />\r\n      )}\r\n\r\n      {/* 토스트 알림 */}\r\n      <Toast toast={toast} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}